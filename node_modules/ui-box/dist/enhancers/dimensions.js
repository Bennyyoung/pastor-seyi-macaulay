"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prop_types_1 = __importDefault(require("prop-types"));
const get_css_1 = __importDefault(require("../get-css"));
exports.propTypes = {
    height: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    maxHeight: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    maxWidth: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    minHeight: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    minWidth: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    width: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number])
};
exports.propAliases = {};
exports.propValidators = {};
const width = {
    className: 'w',
    cssName: 'width',
    jsName: 'width'
};
const height = {
    className: 'h',
    cssName: 'height',
    jsName: 'height'
};
const minWidth = {
    className: 'min-w',
    cssName: 'min-width',
    jsName: 'minWidth'
};
const minHeight = {
    className: 'min-h',
    cssName: 'min-height',
    jsName: 'minHeight'
};
const maxWidth = {
    className: 'max-w',
    cssName: 'max-width',
    jsName: 'maxWidth'
};
const maxHeight = {
    className: 'max-h',
    cssName: 'max-height',
    jsName: 'maxHeight'
};
exports.propEnhancers = {
    height: (value) => get_css_1.default(height, value),
    maxHeight: (value) => get_css_1.default(maxHeight, value),
    maxWidth: (value) => get_css_1.default(maxWidth, value),
    minHeight: (value) => get_css_1.default(minHeight, value),
    minWidth: (value) => get_css_1.default(minWidth, value),
    width: (value) => get_css_1.default(width, value)
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGltZW5zaW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmhhbmNlcnMvZGltZW5zaW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDREQUFrQztBQUNsQyx5REFBK0I7QUFHbEIsUUFBQSxTQUFTLEdBQXFCO0lBQ3pDLE1BQU0sRUFBRSxvQkFBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFTLENBQUMsTUFBTSxFQUFFLG9CQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakUsU0FBUyxFQUFFLG9CQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsb0JBQVMsQ0FBQyxNQUFNLEVBQUUsb0JBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwRSxRQUFRLEVBQUUsb0JBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxvQkFBUyxDQUFDLE1BQU0sRUFBRSxvQkFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25FLFNBQVMsRUFBRSxvQkFBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFTLENBQUMsTUFBTSxFQUFFLG9CQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEUsUUFBUSxFQUFFLG9CQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsb0JBQVMsQ0FBQyxNQUFNLEVBQUUsb0JBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuRSxLQUFLLEVBQUUsb0JBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxvQkFBUyxDQUFDLE1BQU0sRUFBRSxvQkFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ2pFLENBQUE7QUFFWSxRQUFBLFdBQVcsR0FBZ0IsRUFBRSxDQUFBO0FBQzdCLFFBQUEsY0FBYyxHQUFtQixFQUFFLENBQUE7QUFFaEQsTUFBTSxLQUFLLEdBQUc7SUFDWixTQUFTLEVBQUUsR0FBRztJQUNkLE9BQU8sRUFBRSxPQUFPO0lBQ2hCLE1BQU0sRUFBRSxPQUFPO0NBQ2hCLENBQUE7QUFDRCxNQUFNLE1BQU0sR0FBRztJQUNiLFNBQVMsRUFBRSxHQUFHO0lBQ2QsT0FBTyxFQUFFLFFBQVE7SUFDakIsTUFBTSxFQUFFLFFBQVE7Q0FDakIsQ0FBQTtBQUNELE1BQU0sUUFBUSxHQUFHO0lBQ2YsU0FBUyxFQUFFLE9BQU87SUFDbEIsT0FBTyxFQUFFLFdBQVc7SUFDcEIsTUFBTSxFQUFFLFVBQVU7Q0FDbkIsQ0FBQTtBQUNELE1BQU0sU0FBUyxHQUFHO0lBQ2hCLFNBQVMsRUFBRSxPQUFPO0lBQ2xCLE9BQU8sRUFBRSxZQUFZO0lBQ3JCLE1BQU0sRUFBRSxXQUFXO0NBQ3BCLENBQUE7QUFDRCxNQUFNLFFBQVEsR0FBRztJQUNmLFNBQVMsRUFBRSxPQUFPO0lBQ2xCLE9BQU8sRUFBRSxXQUFXO0lBQ3BCLE1BQU0sRUFBRSxVQUFVO0NBQ25CLENBQUE7QUFDRCxNQUFNLFNBQVMsR0FBRztJQUNoQixTQUFTLEVBQUUsT0FBTztJQUNsQixPQUFPLEVBQUUsWUFBWTtJQUNyQixNQUFNLEVBQUUsV0FBVztDQUNwQixDQUFBO0FBRVksUUFBQSxhQUFhLEdBQWtCO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQTRCLEVBQUUsRUFBRSxDQUFDLGlCQUFNLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQztJQUMvRCxTQUFTLEVBQUUsQ0FBQyxLQUE0QixFQUFFLEVBQUUsQ0FBQyxpQkFBTSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7SUFDckUsUUFBUSxFQUFFLENBQUMsS0FBNEIsRUFBRSxFQUFFLENBQUMsaUJBQU0sQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDO0lBQ25FLFNBQVMsRUFBRSxDQUFDLEtBQTRCLEVBQUUsRUFBRSxDQUFDLGlCQUFNLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQztJQUNyRSxRQUFRLEVBQUUsQ0FBQyxLQUE0QixFQUFFLEVBQUUsQ0FBQyxpQkFBTSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7SUFDbkUsS0FBSyxFQUFFLENBQUMsS0FBNEIsRUFBRSxFQUFFLENBQUMsaUJBQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO0NBQzlELENBQUEifQ==
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// This file is based off glamor's StyleSheet
// https://github.com/threepointone/glamor/blob/v2.20.40/src/sheet.js
const isBrowser = typeof window !== 'undefined';
function last(arr) {
    return arr[arr.length - 1];
}
function sheetForTag(tag) {
    if (tag.sheet) {
        return tag.sheet;
    }
    // This weirdness brought to you by firefox
    for (let i = 0; i < document.styleSheets.length; i += 1) {
        if (document.styleSheets[i].ownerNode === tag) {
            return document.styleSheets[i];
        }
    }
    return;
}
function makeStyleTag() {
    const tag = document.createElement('style');
    tag.type = 'text/css';
    tag.setAttribute('data-ui-box', '');
    tag.append(document.createTextNode(''));
    (document.head || document.querySelector('head')).append(tag);
    return tag;
}
class CustomStyleSheet {
    constructor(options = {}) {
        this.tags = [];
        this.ctr = 0;
        this.injected = false;
        // The big drawback here is that the css won't be editable in devtools
        this.isSpeedy = options.speedy === undefined
            ? process.env.NODE_ENV === 'production'
            : options.speedy;
        this.maxLength = options.maxLength || 65000;
    }
    getSheet() {
        return sheetForTag(last(this.tags));
    }
    inject() {
        if (this.injected) {
            throw new Error('StyleSheet has already been injected.');
        }
        if (isBrowser) {
            this.tags[0] = makeStyleTag();
        }
        else {
            // Server side 'polyfill'. just enough behavior to be useful.
            this.sheet = {
                cssRules: [],
                insertRule: (rule) => {
                    // Enough 'spec compliance' to be able to extract the rules later
                    // in other words, just the cssText field
                    this.sheet.cssRules.push({ cssText: rule });
                }
            };
        }
        this.injected = true;
    }
    speedy(bool) {
        if (this.ctr !== 0) {
            throw new Error(`StyleSheet cannot change speedy mode after inserting any rule to sheet. Either call speedy(${bool}) earlier in your app, or call flush() before speedy(${bool})`);
        }
        this.isSpeedy = Boolean(bool);
    }
    _insert(sheet, rule) {
        // This weirdness for perf
        sheet.insertRule(rule, sheet.cssRules.length);
    }
    insert(rule) {
        if (isBrowser) {
            const sheet = this.getSheet();
            // This is the ultrafast version, works across browsers
            if (this.isSpeedy && sheet && sheet.insertRule) {
                this._insert(sheet, rule);
            }
            else {
                last(this.tags).append(document.createTextNode(rule));
            }
        }
        else if (this.sheet) {
            // Server side is pretty simple
            this.sheet.insertRule(rule, this.sheet.cssRules.length);
        }
        this.ctr += 1;
        if (isBrowser && this.ctr % this.maxLength === 0) {
            this.tags.push(makeStyleTag());
        }
        return this.ctr - 1;
    }
    flush() {
        if (isBrowser) {
            this.tags.forEach(tag => tag.parentNode.removeChild(tag));
            this.tags = [];
            this.sheet = null;
            this.ctr = 0;
        }
        else if (this.sheet) {
            // Simpler on server
            this.sheet.cssRules = [];
        }
        this.injected = false;
    }
    rules() {
        if (!isBrowser) {
            return (this.sheet ? this.sheet.cssRules : []);
        }
        const arr = [];
        this.tags.forEach(tag => {
            const sheet = sheetForTag(tag);
            if (sheet) {
                const rules = Array.from(sheet.cssRules);
                arr.splice(arr.length, 0, ...[...rules]);
            }
        });
        return arr;
    }
}
exports.default = CustomStyleSheet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUtc2hlZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvc3R5bGUtc2hlZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBNkM7QUFDN0MscUVBQXFFO0FBQ3JFLE1BQU0sU0FBUyxHQUFHLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQTtBQUUvQyxTQUFTLElBQUksQ0FBSSxHQUFRO0lBQ3ZCLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDNUIsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLEdBQXFCO0lBQ3hDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRTtRQUNiLE9BQU8sR0FBRyxDQUFDLEtBQXNCLENBQUE7S0FDbEM7SUFFRCwyQ0FBMkM7SUFDM0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDdkQsSUFBSSxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBSyxHQUFHLEVBQUU7WUFDN0MsT0FBTyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBbUIsQ0FBQTtTQUNqRDtLQUNGO0lBRUQsT0FBTTtBQUNSLENBQUM7QUFFRCxTQUFTLFlBQVk7SUFDbkIsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMzQyxHQUFHLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQTtJQUNyQixHQUFHLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNuQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDdEM7SUFBQSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLGFB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
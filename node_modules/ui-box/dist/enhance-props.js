"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const enhancers_1 = require("./enhancers");
const expand_aliases_1 = __importDefault(require("./expand-aliases"));
const cache = __importStar(require("./cache"));
const styles = __importStar(require("./styles"));
/**
 * Converts the CSS props to class names and inserts the styles.
 */
function enhanceProps(rawProps) {
    const propsMap = expand_aliases_1.default(rawProps);
    const preservedProps = {};
    let className = rawProps.className || '';
    for (const [propName, propValue] of propsMap) {
        const cachedClassName = cache.get(propName, propValue);
        if (cachedClassName) {
            className = `${className} ${cachedClassName}`;
            continue;
        }
        const enhancer = enhancers_1.propEnhancers[propName];
        // Skip false boolean enhancers. e.g: `clearfix={false}`
        // Also allows omitting props via overriding with `null` (i.e: neutralising props)
        if (enhancer &&
            (propValue === null || propValue === undefined || propValue === false)) {
            continue;
        }
        else if (!enhancer) {
            // Pass through native props. e.g: disabled, value, type
            preservedProps[propName] = propValue;
            continue;
        }
        const newCss = enhancer(propValue);
        // Allow enhancers to return null for invalid values
        if (newCss) {
            styles.add(newCss.styles);
            cache.set(propName, propValue, newCss.className);
            className = `${className} ${newCss.className}`;
        }
    }
    className = className.trim();
    return { className, enhancedProps: preservedProps };
}
exports.default = enhanceProps;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5oYW5jZS1wcm9wcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lbmhhbmNlLXByb3BzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDJDQUF5QztBQUN6QyxzRUFBNEM7QUFDNUMsK0NBQWdDO0FBQ2hDLGlEQUFrQztBQVdsQzs7R0FFRztBQUNILFNBQXdCLFlBQVksQ0FBQyxRQUE2RDtJQUNoRyxNQUFNLFFBQVEsR0FBRyx3QkFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3hDLE1BQU0sY0FBYyxHQUFtQixFQUFFLENBQUE7SUFDekMsSUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUE7SUFFeEMsS0FBSyxNQUFNLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxJQUFJLFFBQVEsRUFBRTtRQUM1QyxNQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUN0RCxJQUFJLGVBQWUsRUFBRTtZQUNuQixTQUFTLEdBQUcsR0FBRyxTQUFTLElBQUksZUFBZSxFQUFFLENBQUE7WUFDN0MsU0FBUTtTQUNUO1FBRUQsTUFBTSxRQUFRLEdBQUcseUJBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUN4Qyx3REFBd0Q7UUFDeEQsa0ZBQWtGO1FBQ2xGLElBQ0UsUUFBUTtZQUNSLENBQUMsU0FBUyxLQUFLLElBQUksSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFNBQVMsS0FBSyxLQUFLLENBQUMsRUFDdEU7WUFDQSxTQUFRO1NBQ1Q7YUFBTSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3BCLHdEQUF3RDtZQUN4RCxjQUFjLENBQUMsUUFBUSxDQUFDLEdBQUcsU0FBUyxDQUFBO1lBQ3BDLFNBQVE7U0FDVDtRQUVELE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNsQyxvREFBb0Q7UUFDcEQsSUFBSSxNQUFNLEVBQUU7WUFDVixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUN6QixLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1lBQ2hELFNBQVMsR0FBRyxHQUFHLFNBQVMsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUE7U0FDL0M7S0FDRjtJQUVELFNBQVMsR0FBRyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUE7SUFFNUIsT0FBTyxFQUFDLFNBQVMsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFDLENBQUE7QUFDbkQsQ0FBQztBQXRDRCwrQkFzQ0MifQ==
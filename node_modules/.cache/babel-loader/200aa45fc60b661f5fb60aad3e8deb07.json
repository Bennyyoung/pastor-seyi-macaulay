{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\benjamin\\\\Desktop\\\\ALL ABOUT PROGRAMMING\\\\WEBSITE_WORKS\\\\READY_TO_BE_SOLD_WORKS\\\\Pst_Seyi\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst enhancers_1 = require(\"./enhancers\");\n\nconst expand_aliases_1 = __importDefault(require(\"./expand-aliases\"));\n\nconst cache = __importStar(require(\"./cache\"));\n\nconst styles = __importStar(require(\"./styles\"));\n/**\n * Converts the CSS props to class names and inserts the styles.\n */\n\n\nfunction enhanceProps(rawProps) {\n  const propsMap = expand_aliases_1.default(rawProps);\n  const preservedProps = {};\n  let className = rawProps.className || '';\n\n  for (const _ref of propsMap) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    const propName = _ref2[0];\n    const propValue = _ref2[1];\n    const cachedClassName = cache.get(propName, propValue);\n\n    if (cachedClassName) {\n      className = \"\".concat(className, \" \").concat(cachedClassName);\n      continue;\n    }\n\n    const enhancer = enhancers_1.propEnhancers[propName]; // Skip false boolean enhancers. e.g: `clearfix={false}`\n    // Also allows omitting props via overriding with `null` (i.e: neutralising props)\n\n    if (enhancer && (propValue === null || propValue === undefined || propValue === false)) {\n      continue;\n    } else if (!enhancer) {\n      // Pass through native props. e.g: disabled, value, type\n      preservedProps[propName] = propValue;\n      continue;\n    }\n\n    const newCss = enhancer(propValue); // Allow enhancers to return null for invalid values\n\n    if (newCss) {\n      styles.add(newCss.styles);\n      cache.set(propName, propValue, newCss.className);\n      className = \"\".concat(className, \" \").concat(newCss.className);\n    }\n  }\n\n  className = className.trim();\n  return {\n    className,\n    enhancedProps: preservedProps\n  };\n}\n\nexports.default = enhanceProps;","map":null,"metadata":{},"sourceType":"script"}
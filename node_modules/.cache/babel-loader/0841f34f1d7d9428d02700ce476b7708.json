{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nvar StickyFooter = function (_Component) {\n  _inherits(StickyFooter, _Component);\n\n  function StickyFooter(props) {\n    _classCallCheck(this, StickyFooter);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.determineState = function () {\n      var scrollOffset = window.pageYOffset + window.innerHeight;\n      var contentHeight = document.body.clientHeight - _this.props.bottomThreshold;\n\n      if (!_this.state.isAtBottom && scrollOffset >= contentHeight) {\n        _this.setState({\n          isAtBottom: true\n        });\n\n        _this.props.onFooterStateChange && _this.props.onFooterStateChange(true);\n      } else if (_this.state.isAtBottom && scrollOffset < contentHeight - contentHeight * _this.props.stickAtMultiplier) {\n        _this.setState({\n          isAtBottom: false\n        });\n\n        _this.props.onFooterStateChange && _this.props.onFooterStateChange(false);\n      }\n    };\n\n    _this.handleScroll = function () {\n      _this.determineState();\n    };\n\n    _this.state = {\n      isAtBottom: false\n    };\n    return _this;\n  }\n\n  StickyFooter.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    this.observer = new MutationObserver(function (mutations) {\n      var targetHeight = mutations[mutations.length - 1].target.clientHeight;\n      var remainingHeight = document.body.clientHeight - targetHeight;\n      var totalContentHeight = targetHeight + remainingHeight;\n\n      if (totalContentHeight > window.innerHeight) {\n        _this2.determineState();\n      } else {\n        _this2.setState({\n          isAtBottom: true\n        });\n\n        _this2.props.onFooterStateChange && _this2.props.onFooterStateChange(true);\n      }\n    });\n    this.observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true\n    });\n    window.addEventListener(\"scroll\", this.handleScroll);\n    this.determineState();\n  };\n\n  StickyFooter.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.observer.disconnect();\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  };\n\n  StickyFooter.prototype.render = function render() {\n    var fixedStyles = _extends({}, this.props.stickyStyles, {\n      position: \"fixed\",\n      bottom: 0\n    });\n\n    var initialStyles = _extends({}, this.props.normalStyles, {\n      position: \"static\"\n    });\n\n    return React.createElement(\"div\", null, React.createElement(\"div\", {\n      style: initialStyles\n    }, this.props.children), !this.state.isAtBottom && React.createElement(\"div\", {\n      style: fixedStyles\n    }, this.props.children));\n  };\n\n  return StickyFooter;\n}(Component);\n\nexport { StickyFooter as default };\nStickyFooter.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A value that tells the component how close to the bottom should the scroller be before the sticky footer hides\n   * and displays at the end of your content. The default is 0, meaning the user needs to scroll all the way to the bottom\n   * before the footer hides. A number greater than 0 would cause the sticky footer to hide at some point before the user\n   * has scrolled all the way down, depending on the value of the number.\n   */\n  bottomThreshold: PropTypes.number,\n\n  /**\n   * A value that tells the component how much the user should scroll back up before the sticky footer shows up again.\n   * The default is 0.001. A number greater than the default would require the user scroll up more before the\n   * sticky footer shows up.\n   */\n  stickAtMultiplier: PropTypes.number,\n\n  /**\n   * Styles to be applied to the sticky footer only.\n   */\n  stickyStyles: PropTypes.object,\n\n  /**\n   * Styles to be applied to the footer in its standard location only.\n   */\n  normalStyles: PropTypes.object,\n\n  /**\n   * Callback that informs when the state of the footer has changed from sticky to being in normal document flow, via boolean argument.\n   * true means it is in normal flow, false means it is sticky.\n   */\n  onFooterStateChange: PropTypes.func\n} : {};\nStickyFooter.defaultProps = {\n  bottomThreshold: 0,\n  stickAtMultiplier: 0.001,\n  stickyStyles: {},\n  normalStyles: {}\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // This file is based off glamor's StyleSheet\n// https://github.com/threepointone/glamor/blob/v2.20.40/src/sheet.js\n\nconst isBrowser = typeof window !== 'undefined';\n\nfunction last(arr) {\n  return arr[arr.length - 1];\n}\n\nfunction sheetForTag(tag) {\n  if (tag.sheet) {\n    return tag.sheet;\n  } // This weirdness brought to you by firefox\n\n\n  for (let i = 0; i < document.styleSheets.length; i += 1) {\n    if (document.styleSheets[i].ownerNode === tag) {\n      return document.styleSheets[i];\n    }\n  }\n\n  return;\n}\n\nfunction makeStyleTag() {\n  const tag = document.createElement('style');\n  tag.type = 'text/css';\n  tag.setAttribute('data-ui-box', '');\n  tag.append(document.createTextNode(''));\n  (document.head || document.querySelector('head')).append(tag);\n  return tag;\n}\n\nclass CustomStyleSheet {\n  constructor(options = {}) {\n    this.tags = [];\n    this.ctr = 0;\n    this.injected = false; // The big drawback here is that the css won't be editable in devtools\n\n    this.isSpeedy = options.speedy === undefined ? process.env.NODE_ENV === 'production' : options.speedy;\n    this.maxLength = options.maxLength || 65000;\n  }\n\n  getSheet() {\n    return sheetForTag(last(this.tags));\n  }\n\n  inject() {\n    if (this.injected) {\n      throw new Error('StyleSheet has already been injected.');\n    }\n\n    if (isBrowser) {\n      this.tags[0] = makeStyleTag();\n    } else {\n      // Server side 'polyfill'. just enough behavior to be useful.\n      this.sheet = {\n        cssRules: [],\n        insertRule: rule => {\n          // Enough 'spec compliance' to be able to extract the rules later\n          // in other words, just the cssText field\n          this.sheet.cssRules.push({\n            cssText: rule\n          });\n        }\n      };\n    }\n\n    this.injected = true;\n  }\n\n  speedy(bool) {\n    if (this.ctr !== 0) {\n      throw new Error(\"StyleSheet cannot change speedy mode after inserting any rule to sheet. Either call speedy(\".concat(bool, \") earlier in your app, or call flush() before speedy(\").concat(bool, \")\"));\n    }\n\n    this.isSpeedy = Boolean(bool);\n  }\n\n  _insert(sheet, rule) {\n    // This weirdness for perf\n    sheet.insertRule(rule, sheet.cssRules.length);\n  }\n\n  insert(rule) {\n    if (isBrowser) {\n      const sheet = this.getSheet(); // This is the ultrafast version, works across browsers\n\n      if (this.isSpeedy && sheet && sheet.insertRule) {\n        this._insert(sheet, rule);\n      } else {\n        last(this.tags).append(document.createTextNode(rule));\n      }\n    } else if (this.sheet) {\n      // Server side is pretty simple\n      this.sheet.insertRule(rule, this.sheet.cssRules.length);\n    }\n\n    this.ctr += 1;\n\n    if (isBrowser && this.ctr % this.maxLength === 0) {\n      this.tags.push(makeStyleTag());\n    }\n\n    return this.ctr - 1;\n  }\n\n  flush() {\n    if (isBrowser) {\n      this.tags.forEach(tag => tag.parentNode.removeChild(tag));\n      this.tags = [];\n      this.sheet = null;\n      this.ctr = 0;\n    } else if (this.sheet) {\n      // Simpler on server\n      this.sheet.cssRules = [];\n    }\n\n    this.injected = false;\n  }\n\n  rules() {\n    if (!isBrowser) {\n      return this.sheet ? this.sheet.cssRules : [];\n    }\n\n    const arr = [];\n    this.tags.forEach(tag => {\n      const sheet = sheetForTag(tag);\n\n      if (sheet) {\n        const rules = Array.from(sheet.cssRules);\n        arr.splice(arr.length, 0, ...[...rules]);\n      }\n    });\n    return arr;\n  }\n\n}\n\nexports.default = CustomStyleSheet;","map":null,"metadata":{},"sourceType":"script"}